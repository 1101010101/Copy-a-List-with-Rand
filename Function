//复制含有随机指针节点的链表 
//【题目】 一种特殊的链表节点类描述如下： 
//public class Node 
//{ 
//	public int value; 
//	public Node next; 
//	public Node rand; 
//	public Node(int data) 
//	{ 
//		this.value = data; 
//	} 
//} 
//Node类中的value是节点值，next指针和正常单链表中next指针的意义 
//一 样，都指向下一个节点，rand指针是Node类中新增的指针，这个指 
//针可 能指向链表中的任意一个节点，也可能指向null。 给定一个由 
//Node节点类型组成的无环单链表的头节点head，请实现一个 函数完成 
//这个链表中所有结构的复制，并返回复制的新链表的头节点。 
//进阶： 不使用额外的数据结构，只用有限几个变量，且在时间复杂度为 O(N) 
//内完成原问题要实现的函数

#include<iostream>
#include<stdlib.h>
#define _SILENCE_STDEXT_HASH_DEPRECATION_WARNINGS 1
using namespace std;


class Node
{
public:
	int value;
	Node *next;
	Node *rand;
	Node(int data)
	{
		this->value = data;
	}
};


Node *copyListWithRand(Node *head)
{
	if (head == NULL)
		return NULL;
	Node *cur = head;
	Node *next = NULL;
	while (cur != NULL)
	{
		next = cur->next;
		cur->next = new Node(cur->value);
		cur->next->next = next;
		cur = next;
	}
	cur = head;
	Node *curCopy = NULL;
	while (cur != NULL)
	{
		next = cur->next->next;
		curCopy = cur->next;
		curCopy->rand = cur->rand != NULL ? cur->rand->next : NULL;
		cur = next;
	}
	Node *res = head->next;
	cur = head;
	while (cur != NULL)
	{
		next = cur->next->next;
		curCopy = cur->next;
		cur->next = next;
		curCopy->next = next != NULL ? next->next : NULL;
		cur = next;
	}
	return res;
}

void printPandLinkedList(Node *head)
{
	Node *cur = head;
	cout << "order: ";
	while (cur != NULL)
	{
		cout << cur->value << " ";
		cur = cur->next;
	}
	cout << endl;
	cur = head;
	cout << "rand: ";
	while (cur != NULL)
	{
		if (cur->rand == NULL)
			cout << "- ";
		else
			cout << cur->rand->value<<" ";
		cur = cur->next;
	}
	cout << endl;
}

int main()
{
	Node *head = NULL;
	Node *res1 = NULL;
	head = new Node(1);
	head->next = new Node(2);
	head->next->next = new Node(3);
	head->next->next->next = new Node(4);
	head->next->next->next->next = new Node(5);
	head->next->next->next->next->next = new Node(6);
	head->next->next->next->next->next->next = NULL;

	head->rand = head->next->next->next->next->next;
	head->next->rand = head->next->next->next->next->next;
	head->next->next->rand = head->next->next->next->next;
	head->next->next->next->rand = head->next->next;
	head->next->next->next->next->rand = NULL;
	head->next->next->next->next->next->rand = head->next->next->next;

	printPandLinkedList(head);
	res1 = copyListWithRand(head);
	printPandLinkedList(res1);
	cout << "============================"<<endl;
	system("pause");
	return 0;
}
